---
on:
    workflow_call:
        inputs:
            branch_name:
                type: string
                required: true

jobs:
    sync-main-into-branch:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout repo
              uses: actions/checkout@v4.2.2
              with:
                  fetch-depth: 0

            - name: Setup Git config
              run: |
                  git config user.name "github-actions[bot]"
                  git config user.email "github-actions[bot]@users.noreply.github.com"

            - name: Create or reset sync branch
              env:
                  BRANCH_NAME: ${{ inputs.branch_name }}
              run: |
                  INT_BRANCH_NAME=sync-main-into-${BRANCH_NAME}
                  git checkout main
                  git pull origin main
                  git checkout -B ${INT_BRANCH_NAME}

            - name: Merge test into sync branch
              env:
                  BRANCH_NAME: ${{ inputs.branch_name }}
              run: |
                  git fetch origin ${BRANCH_NAME}
                  git merge origin/${BRANCH_NAME} --no-ff -m "Merge ${BRANCH_NAME} into sync-main-into-${BRANCH_NAME} to satisfy branch protection"

            - name: Push sync branch
              env:
                  BRANCH_NAME: ${{ inputs.branch_name }}
              run: |
                  git push origin sync-main-into-${BRANCH_NAME} --force

            - name: Create or update Pull Request
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  BRANCH_NAME: ${{ inputs.branch_name }}
              run: |
                  # Check if PR exists
                  PR_NUMBER=$(gh pr list --head sync-main-into-${BRANCH_NAME} --base test --json number --jq '.[0].number')
                  if [ -z "$PR_NUMBER" ]; then
                    echo "Creating new PR"
                    gh pr create --title "Sync main into ${BRANCH_NAME}" --body "Automated sync of main branch into ${BRANCH_NAME} branch." --head sync-main-into-${BRANCH_NAME} --base ${BRANCH_NAME}
                  else
                    echo "PR #$PR_NUMBER already exists. No new PR created."
                  fi

            - name: Get Workflow Job URL
              id: get-workflow-job-url
              if: failure()
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  set -euo pipefail
                  jobs_url="${{ github.api_url }}/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/attempts/${{ github.run_attempt }}/jobs"
                  job_name="${{ github.job }}"
                  job_id=$(curl -sSf "$jobs_url" \
                  -H "Accept: application/vnd.github+json" \
                  -H "Authorization: Bearer $GITHUB_TOKEN" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  | jq --arg job_name "$job_name" '.jobs[] | select(.name == $job_name) | .id')
                  echo "Job ID: $job_id"
                  echo "job_url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/job/$job_id" >> "$GITHUB_OUTPUT"

            - name: Setup UV
              if: failure()
              uses: astral-sh/setup-uv@v6

            - name: Set up Python
              if: failure()
              run: uv python install

            - name: Install the project
              if: failure()
              run: uv sync --group github_actions

            - name: Post workflow status to slack
              if: failure()
              env:
                  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
                  WORKFLOW_NAME: ${{ github.workflow }}
                  BRANCH_NAME: ${{ github.head_ref }}
                  JOB_URL: ${{ steps.get-workflow-job-url.outputs.job_url }}
              run: |
                  uv run scripts/merge_conflict_update_slack.py $WORKFLOW_NAME $BRANCH_NAME $JOB_URL
